{
  "generatedSource": [
    {
      "filename": "packages/comp-build-badge/package.json",
      "content": "{\n    \"name\": \"comp-build-badge\",\n    \"description\": \"Badge component for the Build interface\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"main\": \"src/index.tsx\",\n    \"dependencies\": {\n        \"react\": \"*\",\n        \"classnames\": \"*\"\n    }\n}\n",
      "contentHash": "8a4c2aa5379565bee817b8500c4449f4cc462223fdf21bbcb35eeff0c2830b9f",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/comp-build-badge/src/index.tsx",
      "content": "import classNames from \"classnames\";\n\n/** The field names available to be shown in the badge */\nexport type BuildBadgeField = \"buildNumber\" | \"date\" | \"status\";\n\n/** Props for the BuildBadge component */\nexport interface IBuildBadgeProps {\n    /** One build of a program */\n    value: {\n        /** The build number of the build */\n        buildNumber: number;\n        /** The date of the build */\n        date: string;\n        /** The status of the build */\n        status: string;\n    };\n\n    /** The field to show in the badge */\n    field: BuildBadgeField;\n\n    /** Whether the badge should be styled as a danger badge (red) */\n    danger?: boolean;\n\n    /** Whether the badge should be styled as a warning badge (yellow) */\n    warning?: boolean;\n\n    /** Whether the badge should be styled as an info badge (blue) */\n    info?: boolean;\n}\n\n/** The capitalized names of the fields */\nexport const BUILD_BADGE_FIELD_NAMES = {\n    buildNumber: \"Build Number\",\n    date: \"Date\",\n    status: \"Status\",\n};\n\n/** Shows a Build badge */\nexport function BuildBadge(props: IBuildBadgeProps) {\n    const valueClassname = classNames(\"text-white px-2 py-1 rounded-r-lg\", {\n        \"bg-red-500\": props.danger,\n        \"bg-yellow-500\": props.warning,\n        \"bg-blue-500\": props.info,\n        \"bg-green-500\": !props.danger && !props.warning && !props.info,\n    });\n    return (\n        <div className=\"flex flex-row justify-start items-center\">\n            <div className=\"bg-gray-600 text-white px-2 py-1 rounded-l-lg\">\n                {BUILD_BADGE_FIELD_NAMES[props.field]}\n            </div>\n            <div className={valueClassname}>{props.value[props.field]}</div>\n        </div>\n    );\n}\n",
      "contentHash": "83ba3aafd695ed7420d2053b615d4ee7afc19ab7e6405943fff2f233ff350096",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/comp-build-badge/tsconfig.json",
      "content": "{\n    \"compilerOptions\": {\n        \"target\": \"ES2015\",\n        \"module\": \"ES2015\",\n        \"moduleResolution\": \"Node\",\n        \"allowSyntheticDefaultImports\": true,\n        \"skipLibCheck\": true,\n        \"jsx\": \"react-native\"\n    },\n    \"include\": [\"src/**/*.ts\", \"src/**/*.tsx\"],\n    \"exclude\": [\"node_modules\"]\n}\n",
      "contentHash": "91e80d67ff0c29efbce5dbea5b8c2fe9fca64ce0ba26f76314561b042e329869",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/comp-build-table/package.json",
      "content": "{\n    \"name\": \"comp-build-table\",\n    \"description\": \"Data table component for the Build interface\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"main\": \"src/index.tsx\",\n    \"dependencies\": {\n        \"react\": \"*\",\n        \"classnames\": \"*\"\n    }\n}\n",
      "contentHash": "3609b3d0c0db14b9e1517ab6fd6a83443c37e6350b02311a7cc0579e6b903118",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/comp-build-table/src/index.tsx",
      "content": "import classNames from \"classnames\";\n\n/** The columns available to be shown in the data table */\nexport type BuildDataTableColumn = \"buildNumber\" | \"date\" | \"status\";\n\n/** Props for the BuildDataTable component */\nexport interface IBuildDataTableProps {\n    /** One build of a program */\n    value: Array<{\n        /** The build number of the build */\n        buildNumber: number;\n        /** The date of the build */\n        date: string;\n        /** The status of the build */\n        status: string;\n    }>;\n\n    /** The columns to show in the data table */\n    columns: Array<BuildDataTableColumn>;\n}\n\n/** The capitalized names of the columns */\nexport const BUILD_DATA_TABLE_COLUMN_NAMES = {\n    buildNumber: \"Build Number\",\n    date: \"Date\",\n    status: \"Status\",\n};\n\n/** Shows a Build data table */\nexport function BuildDataTable(props: IBuildDataTableProps) {\n    const columnHeaderCells = props.columns.map((column, index) => (\n        <th key={index} className=\"p-2 border border-gray-600\">\n            {BUILD_DATA_TABLE_COLUMN_NAMES[column]}\n        </th>\n    ));\n    const dataRows = props.value.map((row, rowIndex) => (\n        <tr key={rowIndex}>\n            {props.columns.map((column, columnIndex) => (\n                <td key={columnIndex} className=\"p-2 border border-gray-800\">\n                    {row[column]}\n                </td>\n            ))}\n        </tr>\n    ));\n    return (\n        <table className=\"table-auto\">\n            <thead>\n                <tr>{columnHeaderCells}</tr>\n            </thead>\n            <tbody>{dataRows}</tbody>\n        </table>\n    );\n}\n",
      "contentHash": "48dfd80a977434510241b9ad153399ee8f5704804605b810270a961b7929dcbf",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/comp-build-table/tsconfig.json",
      "content": "{\n    \"compilerOptions\": {\n        \"target\": \"ES2015\",\n        \"module\": \"ES2015\",\n        \"moduleResolution\": \"Node\",\n        \"allowSyntheticDefaultImports\": true,\n        \"skipLibCheck\": true,\n        \"jsx\": \"react-native\"\n    },\n    \"include\": [\"src/**/*.ts\", \"src/**/*.tsx\"],\n    \"exclude\": [\"node_modules\"]\n}\n",
      "contentHash": "91e80d67ff0c29efbce5dbea5b8c2fe9fca64ce0ba26f76314561b042e329869",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/comp-product-badge/package.json",
      "content": "{\n    \"name\": \"comp-product-badge\",\n    \"description\": \"Badge component for the Product interface\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"main\": \"src/index.tsx\",\n    \"dependencies\": {\n        \"react\": \"*\",\n        \"classnames\": \"*\"\n    }\n}\n",
      "contentHash": "c59e1c9670e9659e691641d182a04505c315121e996cf1b8337c1063c6df1120",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/comp-product-badge/src/index.tsx",
      "content": "import classNames from \"classnames\";\n\n/** The field names available to be shown in the badge */\nexport type ProductBadgeField =\n    | \"sku\"\n    | \"name\"\n    | \"description\"\n    | \"price\"\n    | \"isAvailable\";\n\n/** Props for the ProductBadge component */\nexport interface IProductBadgeProps {\n    /** A product that is sold in a webshop */\n    value: {\n        /** The stock keeping unit */\n        sku: string;\n        /** The name of the product */\n        name: string;\n        /** A description of the product */\n        description: string;\n        /** The price of the product */\n        price: number;\n        /** Whether the product is available */\n        isAvailable: boolean;\n    };\n\n    /** The field to show in the badge */\n    field: ProductBadgeField;\n\n    /** Whether the badge should be styled as a danger badge (red) */\n    danger?: boolean;\n\n    /** Whether the badge should be styled as a warning badge (yellow) */\n    warning?: boolean;\n\n    /** Whether the badge should be styled as an info badge (blue) */\n    info?: boolean;\n}\n\n/** The capitalized names of the fields */\nexport const PRODUCT_BADGE_FIELD_NAMES = {\n    sku: \"Sku\",\n    name: \"Name\",\n    description: \"Description\",\n    price: \"Price\",\n    isAvailable: \"Is Available\",\n};\n\n/** Shows a Product badge */\nexport function ProductBadge(props: IProductBadgeProps) {\n    const valueClassname = classNames(\"text-white px-2 py-1 rounded-r-lg\", {\n        \"bg-red-500\": props.danger,\n        \"bg-yellow-500\": props.warning,\n        \"bg-blue-500\": props.info,\n        \"bg-green-500\": !props.danger && !props.warning && !props.info,\n    });\n    return (\n        <div className=\"flex flex-row justify-start items-center\">\n            <div className=\"bg-gray-600 text-white px-2 py-1 rounded-l-lg\">\n                {PRODUCT_BADGE_FIELD_NAMES[props.field]}\n            </div>\n            <div className={valueClassname}>{props.value[props.field]}</div>\n        </div>\n    );\n}\n",
      "contentHash": "3f4384048d77356d0eca4a3d19527a6067dfde7b024382c787e51396f124c471",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/comp-product-badge/tsconfig.json",
      "content": "{\n    \"compilerOptions\": {\n        \"target\": \"ES2015\",\n        \"module\": \"ES2015\",\n        \"moduleResolution\": \"Node\",\n        \"allowSyntheticDefaultImports\": true,\n        \"skipLibCheck\": true,\n        \"jsx\": \"react-native\"\n    },\n    \"include\": [\"src/**/*.ts\", \"src/**/*.tsx\"],\n    \"exclude\": [\"node_modules\"]\n}\n",
      "contentHash": "91e80d67ff0c29efbce5dbea5b8c2fe9fca64ce0ba26f76314561b042e329869",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/comp-product-table/package.json",
      "content": "{\n    \"name\": \"comp-product-table\",\n    \"description\": \"Data table component for the Product interface\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"main\": \"src/index.tsx\",\n    \"dependencies\": {\n        \"react\": \"*\",\n        \"classnames\": \"*\"\n    }\n}\n",
      "contentHash": "747ab412183b06694e5ef03f82fcb9c6d0f7974015328d7c66a9fa5b2c7b586e",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/comp-product-table/src/index.tsx",
      "content": "import classNames from \"classnames\";\n\n/** The columns available to be shown in the data table */\nexport type ProductDataTableColumn =\n    | \"sku\"\n    | \"name\"\n    | \"description\"\n    | \"price\"\n    | \"isAvailable\";\n\n/** Props for the ProductDataTable component */\nexport interface IProductDataTableProps {\n    /** A product that is sold in a webshop */\n    value: Array<{\n        /** The stock keeping unit */\n        sku: string;\n        /** The name of the product */\n        name: string;\n        /** A description of the product */\n        description: string;\n        /** The price of the product */\n        price: number;\n        /** Whether the product is available */\n        isAvailable: boolean;\n    }>;\n\n    /** The columns to show in the data table */\n    columns: Array<ProductDataTableColumn>;\n}\n\n/** The capitalized names of the columns */\nexport const PRODUCT_DATA_TABLE_COLUMN_NAMES = {\n    sku: \"Sku\",\n    name: \"Name\",\n    description: \"Description\",\n    price: \"Price\",\n    isAvailable: \"Is Available\",\n};\n\n/** Shows a Product data table */\nexport function ProductDataTable(props: IProductDataTableProps) {\n    const columnHeaderCells = props.columns.map((column, index) => (\n        <th key={index} className=\"p-2 border border-gray-600\">\n            {PRODUCT_DATA_TABLE_COLUMN_NAMES[column]}\n        </th>\n    ));\n    const dataRows = props.value.map((row, rowIndex) => (\n        <tr key={rowIndex}>\n            {props.columns.map((column, columnIndex) => (\n                <td key={columnIndex} className=\"p-2 border border-gray-800\">\n                    {row[column]}\n                </td>\n            ))}\n        </tr>\n    ));\n    return (\n        <table className=\"table-auto\">\n            <thead>\n                <tr>{columnHeaderCells}</tr>\n            </thead>\n            <tbody>{dataRows}</tbody>\n        </table>\n    );\n}\n",
      "contentHash": "edf35f1297bec9d3385bb4d7d390547a902b9aeb4770d1dbff2f3c869d83bb75",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/comp-product-table/tsconfig.json",
      "content": "{\n    \"compilerOptions\": {\n        \"target\": \"ES2015\",\n        \"module\": \"ES2015\",\n        \"moduleResolution\": \"Node\",\n        \"allowSyntheticDefaultImports\": true,\n        \"skipLibCheck\": true,\n        \"jsx\": \"react-native\"\n    },\n    \"include\": [\"src/**/*.ts\", \"src/**/*.tsx\"],\n    \"exclude\": [\"node_modules\"]\n}\n",
      "contentHash": "91e80d67ff0c29efbce5dbea5b8c2fe9fca64ce0ba26f76314561b042e329869",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/component-library/package.json",
      "content": "{\n    \"name\": \"component-library\",\n    \"version\": \"0.0.1\",\n    \"private\": true,\n    \"main\": \"src/index.tsx\",\n    \"dependencies\": {\n        \"comp-product-badge\": \"*\",\n        \"comp-product-table\": \"*\",\n        \"comp-build-badge\": \"*\",\n        \"comp-build-table\": \"*\",\n        \"react\": \"*\"\n    },\n    \"devDependencies\": {\n        \"typescript\": \"*\"\n    }\n}\n",
      "contentHash": "5c04d5e14dd0b3251000dffd5fe7e9b1430bdbe44ae6c03975857e0264740202",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/component-library/src/index.tsx",
      "content": "export * from \"comp-product-badge\";\nexport * from \"comp-product-table\";\nexport * from \"comp-build-badge\";\nexport * from \"comp-build-table\";\n",
      "contentHash": "e3aa91a81c56165f19320abc4d8c1569a61485cb7a2cc2c273face0647e0da1a",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/demo/src/build-badge-demo.tsx",
      "content": "import { useState, useEffect } from \"react\";\nimport {\n    IBuildBadgeProps,\n    BuildBadgeField,\n    BUILD_BADGE_FIELD_NAMES,\n    BuildBadge,\n} from \"component-library\";\n\nconst BUILD_BADGE_FIELD_NAMES_LIST = Object.keys(\n    BUILD_BADGE_FIELD_NAMES\n) as Array<BuildBadgeField>;\n\nconst BUILD_DEFAULT_DATA = {\n    buildNumber: 0,\n    date: \"\",\n    status: \"\",\n};\n\nexport function BuildBadgeDemo() {\n    const [demoField, setDemoField] = useState<BuildBadgeField>(\n        BUILD_BADGE_FIELD_NAMES_LIST[0]\n    );\n    const [demoDanger, setDemoDanger] = useState<boolean>(false);\n    const [demoWarning, setDemoWarning] = useState<boolean>(false);\n    const [demoInfo, setDemoInfo] = useState<boolean>(false);\n    const [demoDataJson, setDemoDataJson] = useState<string>(\n        JSON.stringify(BUILD_DEFAULT_DATA, null, 2)\n    );\n    const [demoDataObject, setDemoDataObject] =\n        useState<any>(BUILD_DEFAULT_DATA);\n    const [demoDataParseError, setDemoDataParseError] = useState<string | null>(\n        null\n    );\n\n    // Try to update the demo data object when the JSON changes\n    useEffect(() => {\n        try {\n            setDemoDataObject(JSON.parse(demoDataJson));\n            setDemoDataParseError(null);\n        } catch (error) {\n            setDemoDataParseError(error.message);\n        }\n    }, [demoDataJson]);\n\n    return (\n        <div className=\"flex flex-col justify-start items-center gap-2\">\n            <p className=\"text-gray-600\">Update demo data below</p>\n            <textarea\n                rows={10}\n                cols={40}\n                value={demoDataJson}\n                onChange={(e) => setDemoDataJson(e.target.value)}\n                className=\"border border-gray-300 rounded-lg p-2 font-mono\"\n            />\n\n            <div className=\"flex flex-row justify-start items-center gap-2\">\n                <label className=\"text-gray-600\">\n                    Select the field to display\n                </label>\n                <select\n                    value={demoField}\n                    onChange={(e) =>\n                        setDemoField(e.target.value as BuildBadgeField)\n                    }\n                >\n                    {BUILD_BADGE_FIELD_NAMES_LIST.map((field) => (\n                        <option key={field} value={field}>\n                            {BUILD_BADGE_FIELD_NAMES[field]}\n                        </option>\n                    ))}\n                </select>\n            </div>\n\n            <div className=\"flex flex-row justify-center items-center gap-2\">\n                <div className=\"flex flex-row justify-start items-center gap-2\">\n                    <label className=\"text-gray-600\">Danger?</label>\n                    <input\n                        type=\"checkbox\"\n                        checked={demoDanger}\n                        onChange={(e) => setDemoDanger(e.target.checked)}\n                    />\n                </div>\n\n                <div className=\"flex flex-row justify-start items-center gap-2\">\n                    <label className=\"text-gray-600\">Warning?</label>\n                    <input\n                        type=\"checkbox\"\n                        checked={demoWarning}\n                        onChange={(e) => setDemoWarning(e.target.checked)}\n                    />\n                </div>\n\n                <div className=\"flex flex-row justify-start items-center gap-2\">\n                    <label className=\"text-gray-600\">Info?</label>\n                    <input\n                        type=\"checkbox\"\n                        checked={demoInfo}\n                        onChange={(e) => setDemoInfo(e.target.checked)}\n                    />\n                </div>\n            </div>\n\n            <BuildBadge\n                value={demoDataObject}\n                field={demoField}\n                danger={demoDanger}\n                warning={demoWarning}\n                info={demoInfo}\n            />\n        </div>\n    );\n}\n",
      "contentHash": "33250a1a34f80a769142a6eed1b7c358e9740f054bd83424fb8c3bd4ed5f427c",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/demo/src/build-table-demo.tsx",
      "content": "import { useState, useEffect } from \"react\";\nimport {\n    IBuildDataTableProps,\n    BuildDataTableColumn,\n    BUILD_DATA_TABLE_COLUMN_NAMES,\n    BuildDataTable,\n} from \"component-library\";\n\nconst BUILD_DATA_TABLE_COLUMNS_LIST = Object.keys(\n    BUILD_DATA_TABLE_COLUMN_NAMES\n) as Array<BuildDataTableColumn>;\n\nconst BUILD_DEFAULT_ARRAY = [\n    {\n        buildNumber: 0,\n        date: \"\",\n        status: \"\",\n    },\n];\n\nexport function BuildDataTableDemo() {\n    const [demoColumns, setDemoColumns] = useState<Array<BuildDataTableColumn>>(\n        BUILD_DATA_TABLE_COLUMNS_LIST\n    );\n    const [demoDataJson, setDemoDataJson] = useState<string>(\n        JSON.stringify(BUILD_DEFAULT_ARRAY, null, 2)\n    );\n    const [demoDataArray, setDemoDataArray] =\n        useState<Array<any>>(BUILD_DEFAULT_ARRAY);\n\n    // Try to update the demo data array when the JSON changes\n    useEffect(() => {\n        try {\n            setDemoDataArray(JSON.parse(demoDataJson));\n        } catch (error) {\n            console.error(error);\n        }\n    }, [demoDataJson]);\n\n    return (\n        <div className=\"flex flex-col justify-start items-center gap-2\">\n            <p className=\"text-gray-600\">Update demo data below</p>\n            <textarea\n                rows={10}\n                cols={40}\n                value={demoDataJson}\n                onChange={(e) => setDemoDataJson(e.target.value)}\n                className=\"border border-gray-300 rounded-lg p-2 font-mono\"\n                placeholder=\"Enter an array of objects here\"\n            />\n\n            <p className=\"text-gray-600\">Select columns to show</p>\n            <select\n                multiple={true}\n                value={demoColumns}\n                onChange={(e) =>\n                    setDemoColumns(\n                        Array.from(\n                            e.target.selectedOptions,\n                            (option) => option.value as BuildDataTableColumn\n                        )\n                    )\n                }\n            >\n                <option value=\"buildNumber\">Build Number</option>\n                <option value=\"date\">Date</option>\n                <option value=\"status\">Status</option>\n            </select>\n\n            <BuildDataTable value={demoDataArray} columns={demoColumns} />\n        </div>\n    );\n}\n",
      "contentHash": "7847b7f336546b6291293f83a6ff3eede27c27ae8e53331238b03188977b8a2b",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/demo/src/index.tsx",
      "content": "import { createRoot } from \"react-dom/client\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { ProductBadgeDemo } from \"./product-badge-demo\";\nimport { ProductDataTableDemo } from \"./product-table-demo\";\nimport { BuildBadgeDemo } from \"./build-badge-demo\";\nimport { BuildDataTableDemo } from \"./build-table-demo\";\n\nconst DEMOS = {\n    ProductBadgeDemo,\n    ProductDataTableDemo,\n    BuildBadgeDemo,\n    BuildDataTableDemo,\n};\n\nconst DEMO_NAMES = {\n    ProductBadgeDemo: \"Product Badge\",\n    ProductDataTableDemo: \"Product Data Table\",\n    BuildBadgeDemo: \"Build Badge\",\n    BuildDataTableDemo: \"Build Data Table\",\n};\n\nconst DEMO_NAMES_LIST = Object.keys(DEMO_NAMES);\n\nfunction App() {\n    const currentDemoComponentRef = useRef(DEMOS[DEMO_NAMES_LIST[0]]);\n    const [currentDemoKey, setCurrentDemoKey] = useState<string>(\n        DEMO_NAMES_LIST[0]\n    );\n    const [demoUpdateKey, setDemoUpdateKey] = useState<number>(0);\n\n    // Update the current demo component when the key changes\n    useEffect(() => {\n        currentDemoComponentRef.current = DEMOS[currentDemoKey];\n        setDemoUpdateKey(demoUpdateKey + 1);\n    }, [currentDemoKey]);\n\n    return (\n        <div className=\"p-2 flex flex-col justify-start items-start gap-2\">\n            <h1 className=\"text-2xl font-bold\">Component Demo!</h1>\n\n            <p className=\"text-gray-600\">Select a component demo</p>\n\n            <select\n                value={currentDemoKey}\n                onChange={(e) => setCurrentDemoKey(e.target.value)}\n            >\n                {DEMO_NAMES_LIST.map((demoKey) => (\n                    <option key={demoKey} value={demoKey}>\n                        {DEMO_NAMES[demoKey]}\n                    </option>\n                ))}\n            </select>\n\n            <currentDemoComponentRef.current key={demoUpdateKey} />\n        </div>\n    );\n}\n\nconst rootEl = document.getElementById(\"root\");\nconst root = createRoot(rootEl);\nroot.render(<App />);\n",
      "contentHash": "71f8c05f97bf988c1cdc8545b6eeef1eda518b01545275746801c026ede2a332",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/demo/src/product-badge-demo.tsx",
      "content": "import { useState, useEffect } from \"react\";\nimport {\n    IProductBadgeProps,\n    ProductBadgeField,\n    PRODUCT_BADGE_FIELD_NAMES,\n    ProductBadge,\n} from \"component-library\";\n\nconst PRODUCT_BADGE_FIELD_NAMES_LIST = Object.keys(\n    PRODUCT_BADGE_FIELD_NAMES\n) as Array<ProductBadgeField>;\n\nconst PRODUCT_DEFAULT_DATA = {\n    sku: \"\",\n    name: \"\",\n    description: \"\",\n    price: 0,\n    isAvailable: false,\n};\n\nexport function ProductBadgeDemo() {\n    const [demoField, setDemoField] = useState<ProductBadgeField>(\n        PRODUCT_BADGE_FIELD_NAMES_LIST[0]\n    );\n    const [demoDanger, setDemoDanger] = useState<boolean>(false);\n    const [demoWarning, setDemoWarning] = useState<boolean>(false);\n    const [demoInfo, setDemoInfo] = useState<boolean>(false);\n    const [demoDataJson, setDemoDataJson] = useState<string>(\n        JSON.stringify(PRODUCT_DEFAULT_DATA, null, 2)\n    );\n    const [demoDataObject, setDemoDataObject] =\n        useState<any>(PRODUCT_DEFAULT_DATA);\n    const [demoDataParseError, setDemoDataParseError] = useState<string | null>(\n        null\n    );\n\n    // Try to update the demo data object when the JSON changes\n    useEffect(() => {\n        try {\n            setDemoDataObject(JSON.parse(demoDataJson));\n            setDemoDataParseError(null);\n        } catch (error) {\n            setDemoDataParseError(error.message);\n        }\n    }, [demoDataJson]);\n\n    return (\n        <div className=\"flex flex-col justify-start items-center gap-2\">\n            <p className=\"text-gray-600\">Update demo data below</p>\n            <textarea\n                rows={10}\n                cols={40}\n                value={demoDataJson}\n                onChange={(e) => setDemoDataJson(e.target.value)}\n                className=\"border border-gray-300 rounded-lg p-2 font-mono\"\n            />\n\n            <div className=\"flex flex-row justify-start items-center gap-2\">\n                <label className=\"text-gray-600\">\n                    Select the field to display\n                </label>\n                <select\n                    value={demoField}\n                    onChange={(e) =>\n                        setDemoField(e.target.value as ProductBadgeField)\n                    }\n                >\n                    {PRODUCT_BADGE_FIELD_NAMES_LIST.map((field) => (\n                        <option key={field} value={field}>\n                            {PRODUCT_BADGE_FIELD_NAMES[field]}\n                        </option>\n                    ))}\n                </select>\n            </div>\n\n            <div className=\"flex flex-row justify-center items-center gap-2\">\n                <div className=\"flex flex-row justify-start items-center gap-2\">\n                    <label className=\"text-gray-600\">Danger?</label>\n                    <input\n                        type=\"checkbox\"\n                        checked={demoDanger}\n                        onChange={(e) => setDemoDanger(e.target.checked)}\n                    />\n                </div>\n\n                <div className=\"flex flex-row justify-start items-center gap-2\">\n                    <label className=\"text-gray-600\">Warning?</label>\n                    <input\n                        type=\"checkbox\"\n                        checked={demoWarning}\n                        onChange={(e) => setDemoWarning(e.target.checked)}\n                    />\n                </div>\n\n                <div className=\"flex flex-row justify-start items-center gap-2\">\n                    <label className=\"text-gray-600\">Info?</label>\n                    <input\n                        type=\"checkbox\"\n                        checked={demoInfo}\n                        onChange={(e) => setDemoInfo(e.target.checked)}\n                    />\n                </div>\n            </div>\n\n            <ProductBadge\n                value={demoDataObject}\n                field={demoField}\n                danger={demoDanger}\n                warning={demoWarning}\n                info={demoInfo}\n            />\n        </div>\n    );\n}\n",
      "contentHash": "d09f883b654c6e0b7acb57f22282ba01ab8290d0e2a694dff7ad13ed1615333b",
      "noWriteIfExists": false
    },
    {
      "filename": "packages/demo/src/product-table-demo.tsx",
      "content": "import { useState, useEffect } from \"react\";\nimport {\n    IProductDataTableProps,\n    ProductDataTableColumn,\n    PRODUCT_DATA_TABLE_COLUMN_NAMES,\n    ProductDataTable,\n} from \"component-library\";\n\nconst PRODUCT_DATA_TABLE_COLUMNS_LIST = Object.keys(\n    PRODUCT_DATA_TABLE_COLUMN_NAMES\n) as Array<ProductDataTableColumn>;\n\nconst PRODUCT_DEFAULT_ARRAY = [\n    {\n        sku: \"\",\n        name: \"\",\n        description: \"\",\n        price: 0,\n        isAvailable: false,\n    },\n];\n\nexport function ProductDataTableDemo() {\n    const [demoColumns, setDemoColumns] = useState<\n        Array<ProductDataTableColumn>\n    >(PRODUCT_DATA_TABLE_COLUMNS_LIST);\n    const [demoDataJson, setDemoDataJson] = useState<string>(\n        JSON.stringify(PRODUCT_DEFAULT_ARRAY, null, 2)\n    );\n    const [demoDataArray, setDemoDataArray] = useState<Array<any>>(\n        PRODUCT_DEFAULT_ARRAY\n    );\n\n    // Try to update the demo data array when the JSON changes\n    useEffect(() => {\n        try {\n            setDemoDataArray(JSON.parse(demoDataJson));\n        } catch (error) {\n            console.error(error);\n        }\n    }, [demoDataJson]);\n\n    return (\n        <div className=\"flex flex-col justify-start items-center gap-2\">\n            <p className=\"text-gray-600\">Update demo data below</p>\n            <textarea\n                rows={10}\n                cols={40}\n                value={demoDataJson}\n                onChange={(e) => setDemoDataJson(e.target.value)}\n                className=\"border border-gray-300 rounded-lg p-2 font-mono\"\n                placeholder=\"Enter an array of objects here\"\n            />\n\n            <p className=\"text-gray-600\">Select columns to show</p>\n            <select\n                multiple={true}\n                value={demoColumns}\n                onChange={(e) =>\n                    setDemoColumns(\n                        Array.from(\n                            e.target.selectedOptions,\n                            (option) => option.value as ProductDataTableColumn\n                        )\n                    )\n                }\n            >\n                <option value=\"sku\">Sku</option>\n                <option value=\"name\">Name</option>\n                <option value=\"description\">Description</option>\n                <option value=\"price\">Price</option>\n                <option value=\"isAvailable\">Is Available</option>\n            </select>\n\n            <ProductDataTable value={demoDataArray} columns={demoColumns} />\n        </div>\n    );\n}\n",
      "contentHash": "ea3f7ef5edf4638b3028a495fff7f80d17874ac44dec210e09bfe9d8d08ea094",
      "noWriteIfExists": false
    }
  ]
}